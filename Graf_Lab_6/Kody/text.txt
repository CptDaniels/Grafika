function display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    var viewMatrix = mat4.create();
    mat4.lookAt(viewMatrix, vec3.fromValues(0, 8, 40), vec3.fromValues(0, 1, 0), vec3.fromValues(0, 1, 0));
    
    var modelMatrix = mat4.create();
    mat4.rotateY(modelMatrix, modelMatrix, rotateY);

    var gray = vec4.fromValues(0.6, 0.6, 0.6, 1);
    var zero = vec4.fromValues(0, 0, 0, 1);
    
    var stageTransform = mat4.create();
    mat4.translate(stageTransform, stageTransform, vec3.fromValues(0, -1.5, 0));
    mat4.scale(stageTransform, stageTransform, vec3.fromValues(1, 0.05, 1));

    var ambientAndDiffuse = new Float32Array([gray[0], gray[1], gray[2], gray[3]]);
    var specular = new Float32Array([zero[0], zero[1], zero[2], zero[3]]);

    glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, ambientAndDiffuse);
    glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, specular);

    glPushMatrix();
    glMultMatrix(viewMatrix);
    glMultMatrix(modelMatrix);
    glMultMatrix(stageTransform);

    drawSolidCube(gl, 20);

    glPopMatrix();

    var numOfVertices = 13;
    var angle = 2 * Math.PI / numOfVertices;
    var radius = 6;
    var x = 0;
    var z = 0;

    for (var i = 0; i < 8; i += 4) {
        var materialIndex = 12;
        var ambient = new Float32Array([materials[materialIndex][i], materials[materialIndex][i + 1], materials[materialIndex][i + 2], materials[materialIndex][i + 3]]);
        glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, ambient);
    }

    glMaterialf(GL_FRONT_AND_BACK, GL_SHININESS, materials[12][12]);

    for (var i = 1; i <= numOfVertices; i++) {
        glbegin(GL_TRIANGLES);

        x = radius * Math.cos(angle * (i - 1));
        z = radius * Math.sin(angle * (i - 1));

        var x0 = radius * Math.cos(angle * i);
        var z0 = radius * Math.sin(angle * i);

        var U = vec3.fromValues(x - 0, -2.0 - 8, z - 0);
        var V = vec3.fromValues(x - x0, 0, z - z0);

        var normal = vec3.fromValues(
            U[1] * V[2] - U[2] * V[1],
            U[2] * V[0] - U[0] * V[2],
            U[0] * V[1] - U[1] * V[0]
        );

        glNormal3f(normal[0], normal[1], normal[2]);
        glVertex3f(x, -2.0, z);
        glVertex3f(0, 8, 0);
        glVertex3f(x0, -2.0, z0);

        glEnd();
    }
}

/* Initialization, including setting up a camera and configuring the four lights.
 */
function initGL() {
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glClearDepth(1.0);

    glViewport(0, 0, canvas.width, canvas.height);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    var aspect = canvas.width / canvas.height;
    glPerspective(20, aspect, 1, 100);

    glMatrixMode(GL_MODELVIEW);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_NORMALIZE);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);

    var blue1 = [0.4, 0.4, 0.4, 1];
    var blue2 = [0, 0, 0.8, 1];
    var blue3 = [0.3, 0.15, 0.15, 1];

    glLightfv(GL_LIGHT1, GL_DIFFUSE, blue1);
    glLightfv(GL_LIGHT1, GL_SPECULAR, blue2);
    glLightfv(GL_LIGHT1, GL_AMBIENT, blue3);

    var position = [1, 0, 0, 0];
    glLightfv(GL_LIGHT1, GL_POSITION, position);
    glEnable(GL_LIGHT1);
}